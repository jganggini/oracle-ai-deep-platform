---
# Namespace para el stack de monitoreo
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# ConfigMap para la configuraci√≥n de Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'mineru'
        file_sd_configs:
          - files:
            - /etc/prometheus/targets/*.yml
        metrics_path: /metrics
        scrape_interval: 10s
---
# ConfigMap para los targets de MinerU
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-targets
  namespace: monitoring
data:
  mineru.yml: |
    - targets:
        - "host.docker.internal:8001"
      labels:
        job: "mineru"
        service: "mineru-api"
---
# ConfigMap para los dashboards de Grafana
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  mineru-overview.json: |
    {
      "dashboard": {
        "title": "MinerU Overview",
        "panels": []
      }
    }
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
# Deployment de Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: <region>.ocir.io/<tenancy-namespace>/repo/prometheus:latest # Imagen personalizada  
        ports:
        - containerPort: 9090
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=200h'
          - '--web.enable-lifecycle'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-targets
          mountPath: /etc/prometheus/targets
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "16Gi"
            cpu: "1000m"
          limits:
            memory: "32Gi"
            cpu: "2000m"
      imagePullSecrets:
        - name: ocirsecret
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-targets
        configMap:
          name: prometheus-targets
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc
---
# Deployment de Grafana (usando tu Dockerfile personalizado)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: <region>.ocir.io/<tenancy-namespace>/repo/grafana:latest # Imagen personalizada
        ports:
        - containerPort: 3000
        env:
        # Credenciales de Grafana
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
          value: "/etc/grafana/dashboards/mineru-overview.json"
        volumeMounts:
        - name: grafana-dashboards
          mountPath: /etc/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "16Gi"
            cpu: "1000m"
          limits:
            memory: "32Gi"
            cpu: "2000m"
      volumes:
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
---
# Services para ambos
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 8002
    targetPort: 9090
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 8003
    targetPort: 3000
  type: LoadBalancer
